{"version":3,"sources":["TweetButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TweetButton","this","props","useLoad","twttr","ready","widgets","load","refs","tweetButton","createShareButton","ref","href","className","data-text","text","data-show-count","React","Component","App","useState","visibleTweetButtonByLoad","setVisibleTweetButtonByLoad","visibleTweetButtonByCreateShareButton","setVisibleTweetButtonByCreateShareButton","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"4QAsBqBA,E,4LACE,IAAD,OACdC,KAAKC,MAAMC,QACbC,MAAMC,MAAM,SAACD,GAAD,OAA2BA,EAAME,QAAQC,KAAK,EAAKC,KAAKC,eAEpEL,MAAMC,MAAM,SAACD,GAAD,OAA2BA,EAAME,QAAQI,kBAAkB,4BAA6B,EAAKF,KAAKC,YAAa,Q,+BAK7H,OAAIR,KAAKC,MAAMC,QAEX,uBAAGQ,IAAI,cACLC,KAAK,4BACLC,UAAU,uBACVC,YAAWb,KAAKC,MAAMa,KACtBC,kBAAgB,SAJlB,SAOK,yBAAKL,IAAI,oB,GAnBmBM,IAAMC,WCDhCC,EAjBO,WAAO,IAAD,EACsCC,oBAAS,GAD/C,mBACnBC,EADmB,KACOC,EADP,OAEgEF,oBAAS,GAFzE,mBAEnBG,EAFmB,KAEoBC,EAFpB,KAG1B,OACE,yBAAKX,UAAU,OACb,6BACGQ,GAA4B,kBAAC,EAAD,CAAaN,KAAK,GAAGZ,SAAO,IACzD,4BAAQsB,QAAS,kBAAMH,GAA6BD,KAA4BA,EAA2B,yDAAwB,qDAErI,6BACGE,GAAyC,kBAAC,EAAD,CAAaR,KAAK,GAAGZ,SAAS,IACxE,4BAAQsB,QAAS,kBAAMD,GAA0CD,KAAyCA,EAAwC,sEAAqC,oECH3KG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAc/B,MAAMgC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.0ca95baa.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  readonly useLoad: boolean; // twttr.widgets.load を使うかどうか\n  readonly text: string;\n};\n\ndeclare const twttr: TwitterWidgets;\n\ntype TwitterWidgets = {\n  ready: (f: (w: TwitterWidgets) => void) => void;\n  widgets: {\n    load: (e: any) => void;\n    createShareButton: (url: string, e: any, options?: any) => void;\n  };\n};\n\n/**\n * Tweetボタン. twttr.widgets.loadを使う版とtwttr.widgets.createShareButtonを使う版があります.\n * twttr.widgets.load を使う場合、コンポーネントが消えるときに以下のエラーが発生します.\n * react-dom.development.js:10557 Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.\n */\nexport default class TweetButton extends React.Component<Props> {\n  componentDidMount() {\n    if (this.props.useLoad) {\n      twttr.ready((twttr: TwitterWidgets) => twttr.widgets.load(this.refs.tweetButton));\n    } else {\n      twttr.ready((twttr: TwitterWidgets) => twttr.widgets.createShareButton(\"https://twitter.com/share\", this.refs.tweetButton, {}));\n    }\n  }\n\n  render() {\n    if (this.props.useLoad) {\n      return (\n        <a ref=\"tweetButton\"\n          href=\"https://twitter.com/share\"\n          className=\"twitter-share-button\"\n          data-text={this.props.text}\n          data-show-count=\"false\">Tweet</a>\n      );\n    } else {\n      return <div ref=\"tweetButton\" />;\n    }\n  }\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport TweetButton from './TweetButton';\n\nconst App: React.FC = () => {\n  const [visibleTweetButtonByLoad, setVisibleTweetButtonByLoad] = useState(true);\n  const [visibleTweetButtonByCreateShareButton, setVisibleTweetButtonByCreateShareButton] = useState(true);\n  return (\n    <div className=\"App\">\n      <div>\n        {visibleTweetButtonByLoad && <TweetButton text=\"\" useLoad/>}\n        <button onClick={() => setVisibleTweetButtonByLoad(!visibleTweetButtonByLoad)}>{visibleTweetButtonByLoad ? \"Tweetボタンを非表示 (load)\" : \"Tweetボタンを表示 (load)\"}</button>\n      </div>\n      <div>\n        {visibleTweetButtonByCreateShareButton && <TweetButton text=\"\" useLoad={false}/>}\n        <button onClick={() => setVisibleTweetButtonByCreateShareButton(!visibleTweetButtonByCreateShareButton)}>{visibleTweetButtonByCreateShareButton ? \"Tweetボタンを非表示 (createShareButton)\" : \"Tweetボタンを表示 (createShareButton)\"}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}